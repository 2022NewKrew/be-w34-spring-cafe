package com.kakao.cafe.repository.jdbc;

import com.kakao.cafe.entity.User;
import com.kakao.cafe.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Repository;

import javax.sql.DataSource;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Repository
public class JdbcUserRepository implements UserRepository {
    private static final String DROP_TABLE_IF_EXISTS = "DROP TABLE users IF EXISTS";
    private static final String USER_TABLE_DDL = "CREATE TABLE users ( " +
            "id BIGINT GENERATED BY DEFAULT AS IDENTITY, " +
            "nickname VARCHAR(255), " +
            "email VARCHAR(255), " +
            "name VARCHAR(255), " +
            "password VARCHAR(255), " +
            "created_time TIMESTAMP, " +
            "PRIMARY KEY(id) )";
    private static final String FIND_BY_ID_SQL = "SELECT * FROM users WHERE id = ?";
    private static final String FIND_ALL_SQL = "SELECT * FROM users";
    private static final String UPDATE_SQL = "UPDATE USERS SET name=?," +
            " email=?," +
            " password=?" +
            " WHERE id=?";
    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public JdbcUserRepository(DataSource dataSource) {
        jdbcTemplate = new JdbcTemplate(dataSource);
        jdbcTemplate.execute(DROP_TABLE_IF_EXISTS);
        jdbcTemplate.execute(USER_TABLE_DDL);
    }

    @Override
    public void saveUser(User user) {
        SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(jdbcTemplate);
        jdbcInsert.withTableName("users").usingGeneratedKeyColumns("id");
        Map<String, Object> parameters = assembleParameters(user);
        jdbcInsert.execute(new MapSqlParameterSource(parameters));
    }

    private Map<String, Object> assembleParameters(User user) {
        Map<String, Object> parameters = new HashMap<>();
        parameters.put("nickname", user.getNickname());
        parameters.put("email", user.getEmail());
        parameters.put("name", user.getName());
        parameters.put("password", user.getPassword());
        parameters.put("created_time", Timestamp.valueOf(user.getCreatedTime()));
        return parameters;
    }

    @Override
    public Optional<User> findUserById(Long userId) {
        List<User> result = jdbcTemplate.query(FIND_BY_ID_SQL, userRowMapper(), userId);
        return result.stream().findAny();
    }

    @Override
    public List<User> findAll() {
        return jdbcTemplate.query(FIND_ALL_SQL, userRowMapper());
    }

    @Override
    public void updateUser(Long userId, String name, String email, String password) {
        jdbcTemplate.update(UPDATE_SQL, name, email, password, userId);
    }

    private RowMapper<User> userRowMapper() {
        return (result, rowNum) -> {
            User user = new User(
                    result.getString("nickname"),
                    result.getString("email"),
                    result.getString("name"),
                    result.getString("password"),
                    result.getTimestamp("created_time").toLocalDateTime()
            );
            user.setId(result.getLong("id"));
            return user;
        };
    }
}
