package com.kakao.cafe.domain;

import com.kakao.cafe.web.dto.ArticleDTO;
import java.sql.Timestamp;
import java.util.List;
import java.util.stream.Collectors;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Getter;

@Getter
@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class Article {

  private static final int INITIAL_READ_COUNT = 0;

  private final Long id;
  private final User author;
  private String title;
  private String content;
  private Comments comments;
  private Long readCount;
  private Delete isDeleted;
  private Timestamp createAt;
  private Timestamp modifiedAt;


  /**
   * 새 게시물 DTO 를 통해 새 게시물 생성
   *
   * @param articleDTO 새 게시물 요청
   * @return 새 게시물
   */
  public static Article of(ArticleDTO articleDTO) {
    return new Article(
        articleDTO.getId(),
        User.create(articleDTO.getAuthor()),
        articleDTO.getTitle(),
        articleDTO.getContent(),
        Comments.create(articleDTO.getComments()),
        articleDTO.getReadCount(),
        articleDTO.getIsDeleted(),
        articleDTO.getCreateAt(),
        articleDTO.getModifiedAt()
    );
  }


  /**
   * save 후 auto_increment 로 생성된 id 값 포함하여 게시물 객체 재생성
   *
   * @param id      게시 번호
   * @param article id 없는 게시물
   * @return id 생성된 게시물
   */
  public static Article of(Long id, Article article) {
    return new Article(
        id,
        article.author,
        article.getTitle(),
        article.getContent(),
        article.getComments(),
        article.getReadCount(),
        article.getIsDeleted(),
        article.getCreateAt(),
        article.getModifiedAt()
    );
  }


  /**
   * 변경전 게시물에서 변경할 title, content 정보를 통해 새 게시물 생성
   *
   * @param article    변경전 게시물
   * @param articleDTO 변경 내용
   * @return 변경 후 게시물
   */
  public static Article create(Article article, ArticleDTO articleDTO) {
    return new Article(
        article.getId(),
        article.getAuthor(),
        articleDTO.getTitle(),
        articleDTO.getContent(),
        article.getComments(),
        article.getReadCount(),
        article.getIsDeleted(),
        article.getCreateAt(),
        article.getModifiedAt()
    );
  }


  /**
   * 기본 게시물 생성 메서드, 게시물 생성에 필요한 모든 인자를 받는다. repository 에서 find 를 통해 rowMapper 용도로 활용
   *
   * @param id         게시 번호
   * @param author     작성자
   * @param title      제목
   * @param content    내용
   * @param readCount  조회수
   * @param isDeleted  삭제 상태
   * @param createAt   생성일
   * @param modifiedAt 변경일
   * @return Article
   */
  public static Article create(
      Long id, User author, String title,
      String content, Comments comments, Long readCount,
      Delete isDeleted, Timestamp createAt, Timestamp modifiedAt
  ) {
    return new Article(
        id,
        author,
        title,
        content,
        comments,
        readCount,
        isDeleted,
        createAt,
        modifiedAt
    );
  }


  /**
   * 현재 게시물의 조회수 카운트를 올린다.
   */
  public void addReadCount() {
    readCount++;
  }


  /**
   * auto-generated by intellij
   *
   * @return string for log
   */
  @Override
  public String toString() {
    return "Article{" +
        "id=" + id +
        ", author=" + author +
        ", title='" + title + '\'' +
        ", content='" + content + '\'' +
        ", readCount=" + readCount +
        ", isDeleted=" + isDeleted +
        ", createAt=" + createAt +
        ", modifiedAt=" + modifiedAt +
        '}';
  }

}
