package com.kakao.cafe.domain;

import com.kakao.cafe.web.dto.CommentsDTO;
import java.util.Iterator;
import java.util.List;
import java.util.function.Consumer;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import lombok.Getter;

@Getter
public class Comments implements Iterable<Comment> {

  private List<Comment> comments;

  private Comments(List<Comment> comments) {
    this.comments = comments;
  }


  /**
   * Comment 의 1급 컬렉션 구성을 위한 생성자
   *
   * @param comments 댓글 목록
   * @return 댓글 일급컬렉션
   */
  public static Comments of(List<Comment> comments) {
    return new Comments(comments);
  }


  /**
   * 댓글 DTO 매핑
   *
   * @param commentsDTO 댓글 목록 DTO
   * @return 댓글 목록 도메인
   */
  public static Comments create(CommentsDTO commentsDTO) {

    List<Comment> comments = commentsDTO.stream()
        .map(Comment::of)
        .collect(Collectors.toList());

    return new Comments(comments);
  }


  /**
   * 댓글 목록 중 유저를 제외한 다른 유저가 있나 검증 후 결과 반환
   *
   * @param exceptUser 제외할 특정 유저
   * @return 타 댓글 유저 존재 여부
   */
  public boolean isOtherUserExist(User exceptUser) {
    return comments.stream()
        .anyMatch(comment -> !comment.getAuthor().equals(exceptUser));
  }


  /**
   * override Iterable
   *
   * @return Iterator<Comment>
   */
  @Override
  public Iterator<Comment> iterator() {
    return comments.iterator();
  }


  /**
   * override Iterable
   *
   * @param action action in each loop
   */
  @Override
  public void forEach(Consumer<? super Comment> action) {
    comments.forEach(action);
  }


  /**
   * auto-generated by intellij
   *
   * @return string for log
   */
  @Override
  public String toString() {
    return "Comments{" +
        "comments=" + comments +
        '}';
  }


  /**
   * for using stream
   *
   * @return Stream<Comment>
   */
  public Stream<Comment> stream() {
    return comments.stream();
  }


  /**
   * for using size
   *
   * @return size
   */
  public int size() {
    return comments.size();
  }


  /**
   * for using isEmpty
   *
   * @return isEmpty
   */
  public boolean isEmpty() {
    return comments.isEmpty();
  }

}
