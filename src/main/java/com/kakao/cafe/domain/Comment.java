package com.kakao.cafe.domain;

import com.kakao.cafe.exception.CannotDeleteException;
import com.kakao.cafe.exception.NoRequiredValueException;
import com.kakao.cafe.web.dto.CommentDTO;
import java.sql.Timestamp;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Getter;
import org.apache.commons.lang3.StringUtils;

@Getter
@AllArgsConstructor(access = AccessLevel.PRIVATE)
public class Comment {

  private Long id;
  // Many To One - 단방향
  private User author;
  private Long articleId;
  private String contents;
  private Long likeCount;
  private Delete isDeleted;
  private Timestamp createAt;
  private Timestamp modifiedAt;


  /**
   * 댓글 생성 요청 시 DTO 를 도메인 객체로 변환한다. + 필수값 체크
   *
   * @param commentDTO 댓글 생성 요청
   * @return 댓글 도메인 객체
   * @throws NoRequiredValueException 필수값 없음 오류
   */
  public static Comment of(CommentDTO commentDTO) {

    String contents = commentDTO.getContents();

    if(StringUtils.isBlank(contents)) {
      throw new NoRequiredValueException();
    }

    return new Comment(
        commentDTO.getId(),
        User.create(commentDTO.getAuthor()),
        commentDTO.getArticleId(),
        commentDTO.getContents(),
        commentDTO.getLikeCount(),
        commentDTO.getIsDeleted(),
        commentDTO.getCreateAt(),
        commentDTO.getModifiedAt()
    );
  }


  /**
   * DB Save 후 auto_increment 를 받아 재생성하기 위함.
   *
   * @param id 댓글 번호
   * @param comment 기존 댓글 객체
   * @return 댓글 번호 추가된 댓글 객체
   */
  public static Comment of(Long id, Comment comment) {
    return new Comment(
        id,
        comment.getAuthor(),
        comment.getArticleId(),
        comment.getContents(),
        comment.getLikeCount(),
        comment.getIsDeleted(),
        comment.getCreateAt(),
        comment.getModifiedAt()
    );
  }


  /**
   * RowMapper 를 통한 Comment 객체 생성
   *
   * @param id 댓글 번호
   * @param author 작성자
   * @param articleId 게시글 번호
   * @param contents 내용
   * @param likeCount 좋아요 개수
   * @param isDeleted 삭제 상태
   * @param createAt 생성 일
   * @param modifiedAt 변경 일
   * @return 댓글
   */
  public static Comment create(
      Long id, User author, Long articleId,
      String contents, Long likeCount, Delete isDeleted,
      Timestamp createAt, Timestamp modifiedAt
  ) {
    return new Comment(
        id,
        author,
        articleId,
        contents,
        likeCount,
        isDeleted,
        createAt,
        modifiedAt
    );
  }


  /**
   * 예외 체크 후 댓글 삭제상태로 변경
   *
   * @param deleteLevel 삭제 상태
   * @throws CannotDeleteException 삭제 불가
   */
  public void delete(Delete deleteLevel) {

    if(isDeleted.ordinal() >= deleteLevel.ordinal()) {
      throw new CannotDeleteException();
    }

    isDeleted = deleteLevel;
  }


  /**
   * auto-generated by intellij
   *
   * @return string for log
   */
  @Override
  public String toString() {
    return "Comment{" +
        "id=" + id +
        ", author=" + author +
        ", articleId=" + articleId +
        ", contents='" + contents + '\'' +
        ", likeCount=" + likeCount +
        ", isDeleted=" + isDeleted +
        ", createAt=" + createAt +
        ", modifiedAt=" + modifiedAt +
        '}';
  }

}
