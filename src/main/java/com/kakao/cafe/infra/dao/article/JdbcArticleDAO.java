package com.kakao.cafe.infra.dao.article;

import com.kakao.cafe.infra.dao.ArticleDAO;
import com.kakao.cafe.infra.dao.ArticleCreateCommand;
import com.kakao.cafe.util.TimeFormatter;
import com.kakao.cafe.web.article.form.ArticleInventoryInfo;
import com.kakao.cafe.web.article.form.ArticlePostInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Component;

import javax.sql.DataSource;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Component
public class JdbcArticleDAO implements ArticleDAO {

    private static final String DROP_TABLE_IF_EXISTS = "DROP TABLE articles IF EXISTS ";
    private static final String ARTICLE_TABLE_DDL = "CREATE TABLE articles(" +
            "id BIGINT GENERATED BY DEFAULT AS IDENTITY, " +
            "writer_name VARCHAR(255), " +
            "title VARCHAR(255), " +
            "contents VARCHAR(5000), " +
            "number_of_reply INT, " +
            "created_time TIMESTAMP, " +
            "PRIMARY KEY(id) )";
    private static final String FIND_BY_ID_SQL = "SELECT id, writer_name, title, contents, number_of_reply, created_time FROM articles WHERE id = ?";
    private static final String FIND_ARTICLE_WITHOUT_CONTENTS = "SELECT id, writer_name, title, number_of_reply, created_time FROM articles";
    private final JdbcTemplate jdbcTemplate;

    @Autowired
    public JdbcArticleDAO(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
        this.jdbcTemplate.execute(DROP_TABLE_IF_EXISTS);
        this.jdbcTemplate.execute(ARTICLE_TABLE_DDL);
    }

    @Override
    public void saveArticle(ArticleCreateCommand articleCreateCommand) {
        SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(jdbcTemplate);
        jdbcInsert.withTableName("articles").usingGeneratedKeyColumns("id");
        Map<String, Object> parameters = assembleParameters(articleCreateCommand);
        jdbcInsert.execute(new MapSqlParameterSource(parameters));
    }

    private Map<String, Object> assembleParameters(ArticleCreateCommand articleCreateCommand) {
        HashMap<String, Object> parameters = new HashMap<>();
        parameters.put("writer_name", articleCreateCommand.getWriterName());
        parameters.put("title", articleCreateCommand.getTitle());
        parameters.put("contents", articleCreateCommand.getContents());
        parameters.put("number_of_reply", articleCreateCommand.getNumberOfReply());
        parameters.put("created_time", Timestamp.valueOf(articleCreateCommand.getCreatedTime()));
        return parameters;
    }

    @Override
    public List<ArticleInventoryInfo> findArticlesWithoutContents() {
        return jdbcTemplate.query(FIND_ARTICLE_WITHOUT_CONTENTS, articleRowMapperWithoutContents());
    }

    private RowMapper<ArticleInventoryInfo> articleRowMapperWithoutContents() {
        return (rs, rowNum) -> new ArticleInventoryInfo(
                rs.getLong("id"),
                TimeFormatter.formatStandardDateTime(rs.getTimestamp("created_time").toLocalDateTime()),
                rs.getString("writer_name"),
                rs.getString("title"),
                rs.getInt("number_of_reply")
        );
    }

    @Override
    public Optional<ArticlePostInfo> findArticlePostInfo(Long articleId) {
        return jdbcTemplate.query(FIND_BY_ID_SQL, articlePostInfoRowMapper(), articleId).stream().findAny();
    }

    private RowMapper<ArticlePostInfo> articlePostInfoRowMapper() {
        return (rs, rowNum) -> new ArticlePostInfo(
                rs.getLong("id"),
                TimeFormatter.formatStandardDateTime(rs.getTimestamp("created_time").toLocalDateTime()),
                rs.getString("writer_name"),
                rs.getString("title"),
                rs.getString("contents"),
                rs.getInt("number_of_reply")
        );
    }
}
